{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u9996\u9875 For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"\u9996\u9875"},{"location":"#_1","text":"For full documentation visit mkdocs.org .","title":"\u9996\u9875"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"about/","text":"\u5173\u4e8e \u7b14\u8bd5\u9898\u89e3 1. \u8bf7\u9488\u5bf9\u6709\u91cd\u590d\u6570\u5b57\u7684\u6570\u7ec4\u8bbe\u8ba1\u2f00\u4e2a\u5feb\u6392\u7b97\u6cd5\uff0c\u2f50\u5982\uff1a[34, 34, 89, 1, 1, 20, 12]\uff0c\u6392\u5e8f\u540e\u7ed3\u679c\u4e3a [89,34,34,20,12,1,1] \u601d\u8def \u4ee5\u6700\u5de6\u8fb9\u7684\u6811\u4e3a\u57fa\u51c6 \u5c06\u6bd4\u57fa\u51c6\u6570\u5927\u7684\u653e\u5728\u5de6\u8fb9\uff0c\u6bd4\u57fa\u51c6\u6570\u5c0f\u7684\u653e\u5728\u53f3\u8fb9 \u7136\u540e\u5bf9\u5de6\u53f3\u5206\u533a\u5206\u522b\u91cd\u590d\u4e0a\u8ff0\u6b65\u9aa4\uff0c\u76f4\u5230\u533a\u95f4\u5185\u53ea\u6709\u4e00\u4e2a\u6570 \u4ee3\u7801 def quick_sort(nums): n = len(nums) def quick(left, right): if left >= right: return nums pivot, i, j = left, left, right while i < j: while i < j and nums[j] < nums[pivot]: j -= 1 while i < j and nums[i] >= nums[pivot]: i += 1 nums[i], nums[j] = nums[j], nums[i] nums[j], nums[pivot] = nums[pivot], nums[j] quick(left, j-1) quick(j+1, right) return nums return quick(0, n-1) def test_quick_sort(case_list): for input_nums, out_nums in case_list: assert (quick_sort(input_nums) == out_nums), '%s Error' % (input_nums) if __name__ == '__main__': case_list = [ ([1,2,3,4], [4,3,2,1]), ([[34, 34, 89, 1, 1, 20, 12], [89, 34, 34, 20, 12, 1, 1]]), ([5,5,6,4,4], [6,5,5,4,4]), ] test_quick_sort(case_list) 2. \u8bf7\u5229\u2f64Redis \u5b9e\u73b0\u2f00\u4e2a\u901a\u2f64\u5206\u5e03\u5f0f\u9501\uff0c\u5e76\u8bf4\u660e\u60a8\u8bbe\u8ba1\u2f45\u6848\u7684\u4f18\u70b9\u4ee5\u53ca\u8fd8\u6709\u54ea\u4e9b\u9700\u8981\u6539\u8fdb\u7684\u5730\u2f45\uff1b \u601d\u8def redis\u7684set nx ex \u8bbe\u7f6e\u5206\u5e03\u5f0f\u9501\uff0c\u52a0\u9501\u4ee3\u7801\u6267\u884c\u5b8c\u91ca\u653e\u9501\uff0c nx\uff1akey\u65e0\u503c\u65f6\u8bbe\u7f6e\u6210\u529f\uff0c\u6709\u503c\u65f6\u8bbe\u7f6e\u8fd4\u56de\u5931\u8d25 ex\uff1a\u8d85\u65f6\u81ea\u52a8\u91ca\u653e\u9501\uff08\u9632\u6b62\u7f51\u7edc\u6296\u52a8\u91ca\u653e\u5931\u8d25) \u4ee3\u7801 import traceback import time import logging from contextlib import contextmanager import redis import thread logger = logging.getLogger() logger.setLevel(logging.DEBUG) ch = logging.StreamHandler() formatter = logging.Formatter( '%(asctime)s - %(name)s - %(levelname)s: - %(message)s', datefmt='%Y-%m-%d %H:%M:%S') ch.setFormatter(formatter) ch.setLevel(logging.DEBUG) logger.addHandler(ch) redis_cli = redis.StrictRedis(host='localhost', port=6379, db=0) class DLock(object): DEFAULT_TIMEOUT = 30 def __init__(self, redic_cli, key): self.redic_cli = redic_cli self.key = key self.default_value = 'awesome' def acquire(self, timeout=0, interval=0): ''' acquire dlock ''' timeout = self.DEFAULT_TIMEOUT if timeout == 0 else timeout if interval == 0: interval = 0.5 end_time = time.time() + timeout while time.time() < end_time: ret = self._acquire(timeout) if ret: return 0 logger.debug(\"wait ...\") time.sleep(interval) logger.error(\"acquire dlock [%s] failed\", self.key) return -1 def _acquire(self, timeout): return self.redic_cli.set(self.key, self.default_value, ex=timeout, nx=True) def release(self): return self.redic_cli.delete(self.key) @contextmanager def dlock(redis_cli, key, timeout=0, interval=0): ''' one distributed lock ''' lock = DLock(redis_cli, key) try: ret = lock.acquire(timeout, interval=interval) try: yield ret == 0 except: logger.critical(\"yield exits with exception: %s\" % traceback.format_exc()) finally: lock.release() def pay_order(order_no, order_process_time, no): with dlock(redis_cli, order_no, timeout=3): logger.info(\"create order start %s\", no) time.sleep(order_process_time) logger.info(\"create order end %s\", no) return 0 def main(): order_no = 'ord-345' thread.start_new_thread(pay_order, (order_no, 2, 1)) thread.start_new_thread(pay_order, (order_no, 5, 2)) thread.start_new_thread(pay_order, (order_no, 2, 3)) thread.start_new_thread(pay_order, (order_no, 5, 4)) while True: pass if __name__ == '__main__': main() \u4f18\u70b9 \u65b9\u6848\u4e0a\u8003\u8651\u5230\u4e86\u7f51\u7edc\u6296\u52a8\u5bfc\u81f4\u9501\u91ca\u653e\u5931\u8d25\uff0c\u5176\u4ed6\u7ebf\u7a0b\u6c38\u8fdc\u83b7\u53d6\u4e0d\u5230\u6b64\u9501\u4e86\u3002 \u5229\u7528 set ex nx\u547d\u4ee4\u7684\u539f\u5b50\u6027\uff0c\u907f\u514d\u4e86\u8bbe\u7f6e\u6ca1\u6709ttl\u7684\u9501 \u6539\u8fdb \u9501\u7684ttl\u4f9d\u8d56\u7ecf\u9a8c\u5224\u65ad\u7a0b\u5e8f\u5927\u6982\u6267\u884c\u65f6\u95f4\uff0c\u4e00\u65e6\u52a0\u9501\u903b\u8f91\u8d85\u65f6\u8fd8\u672a\u6267\u884c\u5b8c\uff0c\u5176\u4ed6\u7ebf\u7a0b\u8bbf\u95ee\u6b64\u8d44\u6e90\u4f1a\u7ade\u4e89\u3002\u53ef\u8003\u8651\u8d77\u4e00\u4e2a\u540e\u53f0\u7ebf\u7a0b\u76d1\u63a7\u7a0b\u5e8f\u6267\u884c\u60c5\u51b5\uff0c\u81ea\u52a8\u7eed\u671f \u7ebf\u7a0bA\u7684\u9501\u53ef\u80fd\u88ab\u7ebf\u7a0bB\u91ca\u653e\uff0c\u53ef\u8003\u8651\u52a0\u9501\u65f6\u5e26\u4e0a\u7ebf\u7a0b\u81ea\u5df1\u72ec\u6709\u7684\u503c\uff0c\u6bd4\u5982\u7ebf\u7a0bA\u7684\u903b\u8f91\u6267\u884c\u8d85\u65f6\uff0c\u9501\u81ea\u52a8\u91ca\u653e\u4e86\uff0c\u7136\u540e\u7ebf\u7a0bB\u62ff\u5230\u9501\uff0c\u540e\u7eed\u7ebf\u7a0bA\u6267\u884c\u5b8c\u540e\u91ca\u653e\u9501\u91ca\u653e\u4e86B\u7533\u8bf7\u7684\u9501 redis\u5b95\u673a\u6216\u4e3b\u4ece\u5207\u6362\u65f6\u4f1a\u53d1\u751f\u6570\u636e\u4e22\u5931\uff0c\u6b64\u65f6\u9501\u6548\u679c\u5c31\u6ca1\u4e86\uff0c\u53ef\u4ee5\u8003\u8651\u7ea2\u9501 3. \u7f16\u7a0b\u9898\uff1a\u6709\u2f00\u5806\u7cd6\u679c\uff0c\u5176\u6570\u91cf\u4e3an\uff0c\u73b0\u5c06\u7cd6\u679c\u5206\u6210\u4e0d\u540c\u6570\u91cf\u7684\u5806\u6570\uff08\u6bcf\u5806\u6570\u91cf\u5747\u4e3a\u6574\u6570\uff0c\u6700\u5c11\u4e3a 1\uff09\uff0c\u8bf7\u7b97\u51fa\u7cd6\u679c\u5806\u5bf9\u5e94\u6570\u91cf\u7684\u6700\u2f24\u4e58\u79ef\u662f\u591a\u5c11\uff0c\u5e76\u7ed9\u51fa\u5bf9\u5e94\u7684\u5206\u914d\u2f45\u6848\uff1b \u4e3e\u4f8b\uff1a\u7cd6\u679c\u6570\u91cf\u4e3a8\uff0c\u53ef\u4ee5\u5f97\u5230\u7684\u4e58\u79ef\u6700\u2f24\u4e3a18\uff0c\u5bf9\u5e94\u7684\u5206\u914d\u2f45\u6848\u4e3a\u30102\uff0c3\uff0c3\u3011\uff1b ... 4. \u5047\u8bbe\u9700\u8981\u8bbe\u8ba1\u2f00\u4e2a\u627f\u62c5\u767e\u4e07\u7ea7pv\uff08\u2f64\u6237\u603b\u65701\u5343\u4e07\uff0c\u6bcf\u2f47\u2f64\u6237\u2f8f\u4e3a\u2f47\u5fd7\u6570\u636e\u9884\u8ba11\u4ebf\u6761\uff09\u7684\u7535\u5546\u2f79 \u7ad9\u767b\u5f55\u7cfb\u7edf\uff0c\u4f60\u7684\u670d\u52a1\u5668\u6280\u672f\u67b6\u6784\u662f\u600e\u4e48\u6837\u7684\uff1f\u2f64\u6237\u4fe1\u606f\u7684\u5b58\u50a8\u2f45\u6848\u2f1c\u4f1a\u5982\u4f55\u8bbe\u8ba1\uff1f\u5982\u679c\u7531\u4f60\u6765\u8fdb\u2f8f \u7cfb\u7edf\u6574\u4f53\u6280\u672f\u8d1f\u8d23\uff0c\u4f60\u4f1a\u5982\u4f55\u53bb\u628a\u63a7\u6574\u4f53\u5f00\u53d1\u8fdb\u5ea6\u548c\u534f\u8c03\u5404\u2f45\u2faf\u8d44\u6e90? \u67b6\u6784 \u591a\u8282\u70b9nginx -> \u591a\u8282\u70b9api server -> \u591a\u8282\u70b9\u4e1a\u52a1\u5b50\u670d\u52a1 -> \u9ad8\u53ef\u7528cache -> \u9ad8\u53ef\u7528db\u96c6\u7fa4 nginx: \u8f6e\u8be2\u6a21\u5f0f\u8bbf\u95ee api server api server: \u4ee4\u724c\u6876\u7b97\u6cd5\u7b97\u6cd5\u5168\u5c40\u9650\u6d41\uff0c\u5e76\u5bf9\u7528\u6237api\u8bbe\u7f6e\u8bbf\u95ee\u8ba1\u6570\u63a7\u5236 cache: redis, \u5b58\u50a8\u7528\u6237\u767b\u5f55\u4fe1\u606f db: \u7528\u6237\u53ca\u7528\u6237\u76f8\u5173\u6570\u636e\u53ef\u80fd\u8981\u505a\u65f6\u95f4\u7eb5\u5411\u7684\u51b7\u70ed\u5206\u79bb\u3001\u6a2a\u5411\u7684hash\u5207\u7247 \u7528\u6237\u5934\u50cf\u3001\u9a8c\u8bc1\u7801\u53ca\u5176\u4ed6\u591a\u5a92\u4f53\u6587\u4ef6\u5b58\u50a8\u5728oss\uff0c\u5e76\u7528cdn\u7f13\u5b58 \u91c7\u7528\u6d88\u606f\u961f\u5217\u5904\u7406\u7528\u6237\u767b\u5f55\u7684\u5f02\u6b65\u903b\u8f91\uff0c\u6bd4\u5982\u7528\u6237\u521d\u59cb\u5316\u540e\u7684\u5176\u4ed6\u5b50\u670d\u52a1\u4e1a\u52a1\u903b\u8f91\u521d\u59cb\u5316\u7b49 \u5b58\u50a8\u65b9\u6848 redis \u534f\u8c03\u5f00\u53d1\u8fdb\u5ea6\u53ca\u8d44\u6e90 \u9996\u5148\u8fdb\u884c\u4e1a\u52a1\u5206\u6790\u548c\uff0c\u9700\u6c42\u62c6\u89e3\uff0c\u521d\u6b65\u8bc6\u522b\u6838\u5fc3\u6d41\u7a0b\u6a21\u5757\u3001\u91cd\u70b9\u8981\u653b\u575a\u7684\u5927\u6570\u636e\u3001\u9ad8\u5e76\u53d1\u6a21\u5757 \u57fa\u672c\u7edf\u4e00\u610f\u89c1\u540e\u5f00\u59cb\u7edf\u4e00\u9009\u578b\u6280\u672f\u6808 \u8bbe\u8ba1\u63a5\u53e3\uff0c\u8bbe\u8ba1\u6570\u636e\u5e93\u6a21\u578b\uff0c\u8bc6\u522b\u9ad8\u5e76\u53d1\u6a21\u5757\uff0c\u5e76\u8bbe\u8ba1\u7f13\u5b58\u67b6\u6784\uff08\u4e2d\u95f4\u4ef6\uff1f\u672c\u5730\uff1f\u9ad8\u53ef\u7528\uff1f\uff09\u4ee5\u53ca\u7f13\u5b58\u7684\u6570\u636e\u7ed3\u6784 3\u8fdb\u884c\u540c\u65f6\u53ef\u534f\u8c03\u5f00\u59cb\u4ee3\u7801\u67b6\u6784\u3001\u4ee5\u53ca\u5f00\u53d1\u73af\u5883\u7684\u642d\u5efa \u5b9e\u73b0\u6838\u5fc3\u4e3b\u7ebf\u903b\u8f91\u3001\u5e76\u6784\u5efa\u5de5\u5177\u7c7b\u3001\u6d4b\u8bd5\u7c7b\u7684\u9879\u76ee\u9aa8\u67b6 \u6839\u636e\u8bbe\u8ba1\u7684\u63a5\u53e3\u53ca\u6a21\u5757\u62c6\u5206\u7ed9\u4e0d\u540c\u7684\u7ec4\u5458\uff0c\u5e76\u5408\u7406\u9884\u4f30\u5de5\u65f6\u3001\u89c4\u5212\u597d\u8fdb\u5ea6 \u6709\u5e8f\u8fed\u4ee3\u9700\u6c42\uff0c\u91cd\u6784\u51b2\u7a81\u5e76\u6f14\u8fdb\u67b6\u6784","title":"\u5173\u4e8e"},{"location":"about/#_1","text":"","title":"\u5173\u4e8e"},{"location":"about/#_2","text":"","title":"\u7b14\u8bd5\u9898\u89e3"},{"location":"about/#1-34-34-89-1-1-20-12-893434201211","text":"\u601d\u8def \u4ee5\u6700\u5de6\u8fb9\u7684\u6811\u4e3a\u57fa\u51c6 \u5c06\u6bd4\u57fa\u51c6\u6570\u5927\u7684\u653e\u5728\u5de6\u8fb9\uff0c\u6bd4\u57fa\u51c6\u6570\u5c0f\u7684\u653e\u5728\u53f3\u8fb9 \u7136\u540e\u5bf9\u5de6\u53f3\u5206\u533a\u5206\u522b\u91cd\u590d\u4e0a\u8ff0\u6b65\u9aa4\uff0c\u76f4\u5230\u533a\u95f4\u5185\u53ea\u6709\u4e00\u4e2a\u6570 \u4ee3\u7801 def quick_sort(nums): n = len(nums) def quick(left, right): if left >= right: return nums pivot, i, j = left, left, right while i < j: while i < j and nums[j] < nums[pivot]: j -= 1 while i < j and nums[i] >= nums[pivot]: i += 1 nums[i], nums[j] = nums[j], nums[i] nums[j], nums[pivot] = nums[pivot], nums[j] quick(left, j-1) quick(j+1, right) return nums return quick(0, n-1) def test_quick_sort(case_list): for input_nums, out_nums in case_list: assert (quick_sort(input_nums) == out_nums), '%s Error' % (input_nums) if __name__ == '__main__': case_list = [ ([1,2,3,4], [4,3,2,1]), ([[34, 34, 89, 1, 1, 20, 12], [89, 34, 34, 20, 12, 1, 1]]), ([5,5,6,4,4], [6,5,5,4,4]), ] test_quick_sort(case_list)","title":"1. \u8bf7\u9488\u5bf9\u6709\u91cd\u590d\u6570\u5b57\u7684\u6570\u7ec4\u8bbe\u8ba1\u2f00\u4e2a\u5feb\u6392\u7b97\u6cd5\uff0c\u2f50\u5982\uff1a[34, 34, 89, 1, 1, 20, 12]\uff0c\u6392\u5e8f\u540e\u7ed3\u679c\u4e3a [89,34,34,20,12,1,1]"},{"location":"about/#2-redis","text":"\u601d\u8def redis\u7684set nx ex \u8bbe\u7f6e\u5206\u5e03\u5f0f\u9501\uff0c\u52a0\u9501\u4ee3\u7801\u6267\u884c\u5b8c\u91ca\u653e\u9501\uff0c nx\uff1akey\u65e0\u503c\u65f6\u8bbe\u7f6e\u6210\u529f\uff0c\u6709\u503c\u65f6\u8bbe\u7f6e\u8fd4\u56de\u5931\u8d25 ex\uff1a\u8d85\u65f6\u81ea\u52a8\u91ca\u653e\u9501\uff08\u9632\u6b62\u7f51\u7edc\u6296\u52a8\u91ca\u653e\u5931\u8d25) \u4ee3\u7801 import traceback import time import logging from contextlib import contextmanager import redis import thread logger = logging.getLogger() logger.setLevel(logging.DEBUG) ch = logging.StreamHandler() formatter = logging.Formatter( '%(asctime)s - %(name)s - %(levelname)s: - %(message)s', datefmt='%Y-%m-%d %H:%M:%S') ch.setFormatter(formatter) ch.setLevel(logging.DEBUG) logger.addHandler(ch) redis_cli = redis.StrictRedis(host='localhost', port=6379, db=0) class DLock(object): DEFAULT_TIMEOUT = 30 def __init__(self, redic_cli, key): self.redic_cli = redic_cli self.key = key self.default_value = 'awesome' def acquire(self, timeout=0, interval=0): ''' acquire dlock ''' timeout = self.DEFAULT_TIMEOUT if timeout == 0 else timeout if interval == 0: interval = 0.5 end_time = time.time() + timeout while time.time() < end_time: ret = self._acquire(timeout) if ret: return 0 logger.debug(\"wait ...\") time.sleep(interval) logger.error(\"acquire dlock [%s] failed\", self.key) return -1 def _acquire(self, timeout): return self.redic_cli.set(self.key, self.default_value, ex=timeout, nx=True) def release(self): return self.redic_cli.delete(self.key) @contextmanager def dlock(redis_cli, key, timeout=0, interval=0): ''' one distributed lock ''' lock = DLock(redis_cli, key) try: ret = lock.acquire(timeout, interval=interval) try: yield ret == 0 except: logger.critical(\"yield exits with exception: %s\" % traceback.format_exc()) finally: lock.release() def pay_order(order_no, order_process_time, no): with dlock(redis_cli, order_no, timeout=3): logger.info(\"create order start %s\", no) time.sleep(order_process_time) logger.info(\"create order end %s\", no) return 0 def main(): order_no = 'ord-345' thread.start_new_thread(pay_order, (order_no, 2, 1)) thread.start_new_thread(pay_order, (order_no, 5, 2)) thread.start_new_thread(pay_order, (order_no, 2, 3)) thread.start_new_thread(pay_order, (order_no, 5, 4)) while True: pass if __name__ == '__main__': main() \u4f18\u70b9 \u65b9\u6848\u4e0a\u8003\u8651\u5230\u4e86\u7f51\u7edc\u6296\u52a8\u5bfc\u81f4\u9501\u91ca\u653e\u5931\u8d25\uff0c\u5176\u4ed6\u7ebf\u7a0b\u6c38\u8fdc\u83b7\u53d6\u4e0d\u5230\u6b64\u9501\u4e86\u3002 \u5229\u7528 set ex nx\u547d\u4ee4\u7684\u539f\u5b50\u6027\uff0c\u907f\u514d\u4e86\u8bbe\u7f6e\u6ca1\u6709ttl\u7684\u9501 \u6539\u8fdb \u9501\u7684ttl\u4f9d\u8d56\u7ecf\u9a8c\u5224\u65ad\u7a0b\u5e8f\u5927\u6982\u6267\u884c\u65f6\u95f4\uff0c\u4e00\u65e6\u52a0\u9501\u903b\u8f91\u8d85\u65f6\u8fd8\u672a\u6267\u884c\u5b8c\uff0c\u5176\u4ed6\u7ebf\u7a0b\u8bbf\u95ee\u6b64\u8d44\u6e90\u4f1a\u7ade\u4e89\u3002\u53ef\u8003\u8651\u8d77\u4e00\u4e2a\u540e\u53f0\u7ebf\u7a0b\u76d1\u63a7\u7a0b\u5e8f\u6267\u884c\u60c5\u51b5\uff0c\u81ea\u52a8\u7eed\u671f \u7ebf\u7a0bA\u7684\u9501\u53ef\u80fd\u88ab\u7ebf\u7a0bB\u91ca\u653e\uff0c\u53ef\u8003\u8651\u52a0\u9501\u65f6\u5e26\u4e0a\u7ebf\u7a0b\u81ea\u5df1\u72ec\u6709\u7684\u503c\uff0c\u6bd4\u5982\u7ebf\u7a0bA\u7684\u903b\u8f91\u6267\u884c\u8d85\u65f6\uff0c\u9501\u81ea\u52a8\u91ca\u653e\u4e86\uff0c\u7136\u540e\u7ebf\u7a0bB\u62ff\u5230\u9501\uff0c\u540e\u7eed\u7ebf\u7a0bA\u6267\u884c\u5b8c\u540e\u91ca\u653e\u9501\u91ca\u653e\u4e86B\u7533\u8bf7\u7684\u9501 redis\u5b95\u673a\u6216\u4e3b\u4ece\u5207\u6362\u65f6\u4f1a\u53d1\u751f\u6570\u636e\u4e22\u5931\uff0c\u6b64\u65f6\u9501\u6548\u679c\u5c31\u6ca1\u4e86\uff0c\u53ef\u4ee5\u8003\u8651\u7ea2\u9501","title":"2. \u8bf7\u5229\u2f64Redis \u5b9e\u73b0\u2f00\u4e2a\u901a\u2f64\u5206\u5e03\u5f0f\u9501\uff0c\u5e76\u8bf4\u660e\u60a8\u8bbe\u8ba1\u2f45\u6848\u7684\u4f18\u70b9\u4ee5\u53ca\u8fd8\u6709\u54ea\u4e9b\u9700\u8981\u6539\u8fdb\u7684\u5730\u2f45\uff1b"},{"location":"about/#3-n-1-818233","text":"...","title":"3. \u7f16\u7a0b\u9898\uff1a\u6709\u2f00\u5806\u7cd6\u679c\uff0c\u5176\u6570\u91cf\u4e3an\uff0c\u73b0\u5c06\u7cd6\u679c\u5206\u6210\u4e0d\u540c\u6570\u91cf\u7684\u5806\u6570\uff08\u6bcf\u5806\u6570\u91cf\u5747\u4e3a\u6574\u6570\uff0c\u6700\u5c11\u4e3a 1\uff09\uff0c\u8bf7\u7b97\u51fa\u7cd6\u679c\u5806\u5bf9\u5e94\u6570\u91cf\u7684\u6700\u2f24\u4e58\u79ef\u662f\u591a\u5c11\uff0c\u5e76\u7ed9\u51fa\u5bf9\u5e94\u7684\u5206\u914d\u2f45\u6848\uff1b \u4e3e\u4f8b\uff1a\u7cd6\u679c\u6570\u91cf\u4e3a8\uff0c\u53ef\u4ee5\u5f97\u5230\u7684\u4e58\u79ef\u6700\u2f24\u4e3a18\uff0c\u5bf9\u5e94\u7684\u5206\u914d\u2f45\u6848\u4e3a\u30102\uff0c3\uff0c3\u3011\uff1b"},{"location":"about/#4-pv11","text":"\u67b6\u6784 \u591a\u8282\u70b9nginx -> \u591a\u8282\u70b9api server -> \u591a\u8282\u70b9\u4e1a\u52a1\u5b50\u670d\u52a1 -> \u9ad8\u53ef\u7528cache -> \u9ad8\u53ef\u7528db\u96c6\u7fa4 nginx: \u8f6e\u8be2\u6a21\u5f0f\u8bbf\u95ee api server api server: \u4ee4\u724c\u6876\u7b97\u6cd5\u7b97\u6cd5\u5168\u5c40\u9650\u6d41\uff0c\u5e76\u5bf9\u7528\u6237api\u8bbe\u7f6e\u8bbf\u95ee\u8ba1\u6570\u63a7\u5236 cache: redis, \u5b58\u50a8\u7528\u6237\u767b\u5f55\u4fe1\u606f db: \u7528\u6237\u53ca\u7528\u6237\u76f8\u5173\u6570\u636e\u53ef\u80fd\u8981\u505a\u65f6\u95f4\u7eb5\u5411\u7684\u51b7\u70ed\u5206\u79bb\u3001\u6a2a\u5411\u7684hash\u5207\u7247 \u7528\u6237\u5934\u50cf\u3001\u9a8c\u8bc1\u7801\u53ca\u5176\u4ed6\u591a\u5a92\u4f53\u6587\u4ef6\u5b58\u50a8\u5728oss\uff0c\u5e76\u7528cdn\u7f13\u5b58 \u91c7\u7528\u6d88\u606f\u961f\u5217\u5904\u7406\u7528\u6237\u767b\u5f55\u7684\u5f02\u6b65\u903b\u8f91\uff0c\u6bd4\u5982\u7528\u6237\u521d\u59cb\u5316\u540e\u7684\u5176\u4ed6\u5b50\u670d\u52a1\u4e1a\u52a1\u903b\u8f91\u521d\u59cb\u5316\u7b49 \u5b58\u50a8\u65b9\u6848 redis \u534f\u8c03\u5f00\u53d1\u8fdb\u5ea6\u53ca\u8d44\u6e90 \u9996\u5148\u8fdb\u884c\u4e1a\u52a1\u5206\u6790\u548c\uff0c\u9700\u6c42\u62c6\u89e3\uff0c\u521d\u6b65\u8bc6\u522b\u6838\u5fc3\u6d41\u7a0b\u6a21\u5757\u3001\u91cd\u70b9\u8981\u653b\u575a\u7684\u5927\u6570\u636e\u3001\u9ad8\u5e76\u53d1\u6a21\u5757 \u57fa\u672c\u7edf\u4e00\u610f\u89c1\u540e\u5f00\u59cb\u7edf\u4e00\u9009\u578b\u6280\u672f\u6808 \u8bbe\u8ba1\u63a5\u53e3\uff0c\u8bbe\u8ba1\u6570\u636e\u5e93\u6a21\u578b\uff0c\u8bc6\u522b\u9ad8\u5e76\u53d1\u6a21\u5757\uff0c\u5e76\u8bbe\u8ba1\u7f13\u5b58\u67b6\u6784\uff08\u4e2d\u95f4\u4ef6\uff1f\u672c\u5730\uff1f\u9ad8\u53ef\u7528\uff1f\uff09\u4ee5\u53ca\u7f13\u5b58\u7684\u6570\u636e\u7ed3\u6784 3\u8fdb\u884c\u540c\u65f6\u53ef\u534f\u8c03\u5f00\u59cb\u4ee3\u7801\u67b6\u6784\u3001\u4ee5\u53ca\u5f00\u53d1\u73af\u5883\u7684\u642d\u5efa \u5b9e\u73b0\u6838\u5fc3\u4e3b\u7ebf\u903b\u8f91\u3001\u5e76\u6784\u5efa\u5de5\u5177\u7c7b\u3001\u6d4b\u8bd5\u7c7b\u7684\u9879\u76ee\u9aa8\u67b6 \u6839\u636e\u8bbe\u8ba1\u7684\u63a5\u53e3\u53ca\u6a21\u5757\u62c6\u5206\u7ed9\u4e0d\u540c\u7684\u7ec4\u5458\uff0c\u5e76\u5408\u7406\u9884\u4f30\u5de5\u65f6\u3001\u89c4\u5212\u597d\u8fdb\u5ea6 \u6709\u5e8f\u8fed\u4ee3\u9700\u6c42\uff0c\u91cd\u6784\u51b2\u7a81\u5e76\u6f14\u8fdb\u67b6\u6784","title":"4. \u5047\u8bbe\u9700\u8981\u8bbe\u8ba1\u2f00\u4e2a\u627f\u62c5\u767e\u4e07\u7ea7pv\uff08\u2f64\u6237\u603b\u65701\u5343\u4e07\uff0c\u6bcf\u2f47\u2f64\u6237\u2f8f\u4e3a\u2f47\u5fd7\u6570\u636e\u9884\u8ba11\u4ebf\u6761\uff09\u7684\u7535\u5546\u2f79 \u7ad9\u767b\u5f55\u7cfb\u7edf\uff0c\u4f60\u7684\u670d\u52a1\u5668\u6280\u672f\u67b6\u6784\u662f\u600e\u4e48\u6837\u7684\uff1f\u2f64\u6237\u4fe1\u606f\u7684\u5b58\u50a8\u2f45\u6848\u2f1c\u4f1a\u5982\u4f55\u8bbe\u8ba1\uff1f\u5982\u679c\u7531\u4f60\u6765\u8fdb\u2f8f \u7cfb\u7edf\u6574\u4f53\u6280\u672f\u8d1f\u8d23\uff0c\u4f60\u4f1a\u5982\u4f55\u53bb\u628a\u63a7\u6574\u4f53\u5f00\u53d1\u8fdb\u5ea6\u548c\u534f\u8c03\u5404\u2f45\u2faf\u8d44\u6e90?"},{"location":"user-guide/api/","text":"\u63a5\u53e3","title":"Mashmallow API guide"},{"location":"user-guide/api/#_1","text":"","title":"\u63a5\u53e3"},{"location":"user-guide/configuration/","text":"\u914d\u7f6e","title":"User Guide"},{"location":"user-guide/configuration/#_1","text":"","title":"\u914d\u7f6e"},{"location":"user-guide/creating/","text":"\u521b\u5efa plantuml \u793a\u4f8b \u66ff\u6362\u5404\u4e2a\u6e90 $ git -C \"$(brew --repo)\" remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git $ git -C \"$(brew --repo homebrew/core)\" remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git $ git -C \"$(brew --repo homebrew/cask)\" remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-cask.git zsh \u66ff\u6362 brew bintray \u955c\u50cf $ echo 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles' >> ~/.zshrc $ source ~/.zshrc bash \u66ff\u6362 brew bintray \u955c\u50cf $ echo 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles' >> ~/.bash_profile $ source ~/.bash_profile \u5237\u65b0\u6e90 $ brew update","title":"Creating a new Mashmallow project"},{"location":"user-guide/creating/#_1","text":"","title":"\u521b\u5efa"},{"location":"user-guide/creating/#plantuml","text":"","title":"plantuml \u793a\u4f8b"},{"location":"user-guide/creating/#_2","text":"$ git -C \"$(brew --repo)\" remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git $ git -C \"$(brew --repo homebrew/core)\" remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git $ git -C \"$(brew --repo homebrew/cask)\" remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-cask.git","title":"\u66ff\u6362\u5404\u4e2a\u6e90"},{"location":"user-guide/creating/#zsh-brew-bintray","text":"$ echo 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles' >> ~/.zshrc $ source ~/.zshrc","title":"zsh \u66ff\u6362 brew bintray \u955c\u50cf"},{"location":"user-guide/creating/#bash-brew-bintray","text":"$ echo 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles' >> ~/.bash_profile $ source ~/.bash_profile","title":"bash \u66ff\u6362 brew bintray \u955c\u50cf"},{"location":"user-guide/creating/#_3","text":"$ brew update","title":"\u5237\u65b0\u6e90"}]}